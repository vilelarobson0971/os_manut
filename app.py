import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
import shutil
import time
import glob
import base64
import json

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Sistema de Ordens de Servi√ßo",
    page_icon="üîß",
    layout="wide"
)

# Tenta importar o PyGithub com fallback
GITHUB_AVAILABLE = False
try:
    from github import Github
    GITHUB_AVAILABLE = True
except ImportError:
    st.warning("Funcionalidade do GitHub n√£o dispon√≠vel (PyGithub n√£o instalado)")

# Constantes
LOCAL_FILENAME = "ordens_servico.csv"
BACKUP_DIR = "backups"
EXECUTANTES_FILE = "executantes.txt"
MAX_BACKUPS = 10
SENHA_SUPERVISAO = "king@2025"
CONFIG_FILE = "config.json"

# Vari√°veis globais para configura√ß√£o do GitHub
GITHUB_REPO = None
GITHUB_FILEPATH = None
GITHUB_TOKEN = None

TIPOS_MANUTENCAO = {
    1: "El√©trica",
    2: "Mec√¢nica",
    3: "Refrigera√ß√£o",
    4: "Hidr√°ulica",
    5: "Civil",
    6: "Instala√ß√£o"
}

STATUS_OPCOES = {
    1: "Pendente",
    2: "Pausado",
    3: "Em execu√ß√£o",
    4: "Conclu√≠do"
}

# Fun√ß√µes auxiliares
def carregar_config():
    """Carrega as configura√ß√µes do GitHub do arquivo config.json"""
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE) as f:
                config = json.load(f)
                GITHUB_REPO = config.get('github_repo')
                GITHUB_FILEPATH = config.get('github_filepath')
                GITHUB_TOKEN = config.get('github_token')
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√µes: {str(e)}")

def inicializar_arquivos():
    """Garante que todos os arquivos necess√°rios existam e estejam v√°lidos"""
    # Criar diret√≥rio de backups se n√£o existir
    os.makedirs(BACKUP_DIR, exist_ok=True)
    
    # Carregar configura√ß√µes do GitHub
    carregar_config()
    
    # Verificar se temos configura√ß√£o do GitHub e se o m√≥dulo est√° dispon√≠vel
    usar_github = GITHUB_AVAILABLE and GITHUB_REPO and GITHUB_FILEPATH and GITHUB_TOKEN
    
    # Inicializar arquivo de ordens de servi√ßo
    if not os.path.exists(LOCAL_FILENAME) or os.path.getsize(LOCAL_FILENAME) == 0:
        if usar_github:
            baixar_do_github()
        else:
            pd.DataFrame(columns=["ID", "Descri√ß√£o", "Data", "Solicitante", "Local", 
                                "Tipo", "Status", "Executante", "Data Conclus√£o"]).to_csv(LOCAL_FILENAME, index=False)
    
    # Inicializar arquivo de executantes
    if not os.path.exists(EXECUTANTES_FILE):
        with open(EXECUTANTES_FILE, 'w') as f:
            f.write("")

def baixar_do_github():
    """Baixa o arquivo do GitHub se estiver mais atualizado"""
    if not GITHUB_AVAILABLE:
        st.error("Funcionalidade do GitHub n√£o est√° dispon√≠vel")
        return False
    
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(GITHUB_REPO)
        contents = repo.get_contents(GITHUB_FILEPATH)
        
        # Decodificar conte√∫do
        file_content = contents.decoded_content.decode('utf-8')
        
        # Salvar localmente
        with open(LOCAL_FILENAME, 'w') as f:
            f.write(file_content)
            
        return True
    except Exception as e:
        st.error(f"Erro ao baixar do GitHub: {str(e)}")
        return False

def enviar_para_github():
    """Envia o arquivo local para o GitHub"""
    if not GITHUB_AVAILABLE:
        st.error("Funcionalidade do GitHub n√£o est√° dispon√≠vel")
        return False
    
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(GITHUB_REPO)
        
        with open(LOCAL_FILENAME, 'r') as f:
            content = f.read()
        
        # Verifica se o arquivo j√° existe no GitHub
        try:
            contents = repo.get_contents(GITHUB_FILEPATH)
            repo.update_file(contents.path, "Atualiza√ß√£o autom√°tica do sistema de OS", content, contents.sha)
        except:
            repo.create_file(GITHUB_FILEPATH, "Cria√ß√£o inicial do arquivo de OS", content)
            
        return True
    except Exception as e:
        st.error(f"Erro ao enviar para GitHub: {str(e)}")
        return False

# ... (mantenha as outras fun√ß√µes auxiliares como carregar_executantes, salvar_executantes, etc.)

def configurar_github():
    st.header("‚öôÔ∏è Configura√ß√£o do GitHub")
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    
    if not GITHUB_AVAILABLE:
        st.error("""Funcionalidade do GitHub n√£o est√° dispon√≠vel. 
                Para ativar, instale o pacote PyGithub com: 
                `pip install PyGithub`""")
        return
    
    with st.form("github_config_form"):
        repo = st.text_input("Reposit√≥rio GitHub (user/repo)", value=GITHUB_REPO or "")
        filepath = st.text_input("Caminho do arquivo no reposit√≥rio", value=GITHUB_FILEPATH or "")
        token = st.text_input("Token de acesso GitHub", type="password", value=GITHUB_TOKEN or "")
        
        submitted = st.form_submit_button("Salvar Configura√ß√µes")
        
        if submitted:
            if repo and filepath and token:
                try:
                    config = {
                        'github_repo': repo,
                        'github_filepath': filepath,
                        'github_token': token
                    }
                    
                    with open(CONFIG_FILE, 'w') as f:
                        json.dump(config, f)
                    
                    # Atualiza vari√°veis globais
                    GITHUB_REPO = repo
                    GITHUB_FILEPATH = filepath
                    GITHUB_TOKEN = token
                    
                    st.success("Configura√ß√µes salvas com sucesso!")
                    
                    # Tenta sincronizar imediatamente
                    if baixar_do_github():
                        st.success("Dados sincronizados do GitHub!")
                    else:
                        st.warning("Configura√ß√µes salvas, mas n√£o foi poss√≠vel sincronizar com o GitHub")
                        
                except Exception as e:
                    st.error(f"Erro ao salvar configura√ß√µes: {str(e)}")
            else:
                st.error("Preencha todos os campos para ativar a sincroniza√ß√£o com GitHub")

# ... (mantenha as outras fun√ß√µes principais)

def main():
    # Inicializa arquivos e verifica consist√™ncia
    inicializar_arquivos()
    
    # Menu principal
    st.sidebar.title("Menu")
    opcao = st.sidebar.selectbox(
        "Selecione",
        [
            "üè† P√°gina Inicial",
            "üìù Cadastrar OS",
            "üìã Listar OS",
            "üîç Buscar OS",
            "üìä Dashboard",
            "üîê Supervis√£o"
        ]
    )

    # Navega√ß√£o
    if opcao == "üè† P√°gina Inicial":
        pagina_inicial()
    elif opcao == "üìù Cadastrar OS":
        cadastrar_os()
    elif opcao == "üìã Listar OS":
        listar_os()
    elif opcao == "üîç Buscar OS":
        buscar_os()
    elif opcao == "üìä Dashboard":
        dashboard()
    elif opcao == "üîê Supervis√£o":
        pagina_supervisao()

    # Rodap√©
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Sistema de Ordens de Servi√ßo**")
    st.sidebar.markdown("Vers√£o 2.2 com Sincroniza√ß√£o GitHub")
    st.sidebar.markdown("Desenvolvido por Robson Vilela")

if __name__ == "__main__":
    main()
